! Адаптировано из тестов самого Inform 6 (исходники Inform 7)
-cases		[Main] 'rinform/Tests/Test Cases'
!-problems		[Main] 'Test Errors'

-recipe [Main]
	set: $I6 = /usr/bin/inform
	! set: $WORKSPACE = Workspace
	set: $GINT = /home/alexander/bin/dglulxe
	set: $TOC = NO
  ! Set VM to Glulxe.
	set: $VM = G
	! On the basis of which:
  set: $EXT           = ulx
  set: $I6OPTIONS		= -G -Cu +language_name=Russian +rinform/library --opt DICT_CHAR_SIZE=4 --define MAX_UNICODE_CHARS=1024 --opt MAX_STATIC_DATA=30000
  set: $INT			= $GINT
  set: $INTNAME		= dglulxe
  set: $INTOPTIONS	= -u -q
	!set: $SETTINGS = $PATH/_Settings/$CASE.txt
	!if exists: $SETTINGS
	!	set: $I6OPTIONS = `$[`$SETTINGS$]
	!endif
  show: $PATH

	set: $EXECUTE = 1
	mkdir: $PATH/_Story_File_Actual
	mkdir: $PATH/_Console_Actual
	set: $AC = $PATH/_Console_Actual/$CASE.txt
	set: $IC = $PATH/_Console_Ideal/$CASE.txt
	set: $I6SOURCE = $PATH/$CASE.inf
	set: $STORYFILE = $PATH/_Story_File_Actual/$CASE.$EXT

	! First, error message cases, where we require inform6 to fail and with the
	! correct error messages.

	!if: $TYPE problem
	!	debugger: lldb -f $I6 -- `$I6OPTIONS $I6SOURCE $STORYFILE
	!	fail step: $I6 `$I6OPTIONS $I6SOURCE $STORYFILE >$AC 2>&1
	!	or: 'failed to produce error messages' $AC
	!	show: $AC
	!	exists: $IC
	!	or: 'produced error(s), but no ideal transcript existed'
	!	match i6 transcript: $AC $IC
	!	or: 'produced the wrong error(s)'
	!	pass: 'passed'
	!endif

	! And then the general case.

	mkdir: $PATH/_Transcript_Actual
	! mkdir: $PATH/_Transcript_Ideal
	mkdir: $PATH/_md5_Actual

	set: $AMD5 = $PATH/_md5_Actual/$CASE.txt
	set: $IMD5 = $PATH/_md5_Ideal/$CASE.txt
	set: $A = $PATH/_Transcript_Actual/$CASE.txt
	set: $I = $PATH/_Transcript_Ideal/$CASE.txt

	debugger: lldb -f $I6 -- `$I6OPTIONS $I6SOURCE $STORYFILE
	step: $I6 `$I6OPTIONS $I6SOURCE $STORYFILE >$AC 2>&1

	show: $AC
	exists: $IC
	or: 'compiled, but no ideal console output existed'
	match i6 transcript: $AC $IC
	or: 'compiled, but produced the wrong console output'

  step: echo ${glulx:$STORYFILE$} >$AMD5
	if exists: $IMD5
		match text: $AMD5 $IMD5
		or: 'compiled, but produced the wrong md5 checksum'
		
		pass: 'passed, no need to run because md5 correct'
	endif

	if: $EXECUTE 1
	
		set: $SCRIPT = $PATH/_Scripts/$CASE.txt
		if exists: $SCRIPT
			step: $INT `$INTOPTIONS $STORYFILE <$SCRIPT >$A 2>&1
			or: 'compiled, but was unable to run $INTNAME (do you need to make interpreters?)'
		else
			step: $INT `$INTOPTIONS $STORYFILE >$A 2>&1
			or: 'compiled, but was unable to run $INTNAME (do you need to make interpreters?)'
		endif

		exists: $I
		or: 'compiled, but no ideal transcript existed'
		if: $VM G
			match glulxe transcript: $A $I
			or: 'compiled, but played incorrectly'
		else
			match frotz transcript: $A $I
			or: 'compiled, but played incorrectly'
		endif
	endif

	pass: 'passed'
-end
